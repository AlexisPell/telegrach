version: '3.7'

services:
  # # REDIS
  # redis:
  #   container_name: redis
  #   image: redis:5
  #   networks:
  #     - webnet
  # # PROXY
  # proxy-server:
  #   container_name: proxy-server
  #   hostname: proxy-server
  #   build: ./services/proxy-server
  #   ports:
  #     - '8080:8080'
  #   networks:
  #     - webnet
  #   depends_on:
  #     - chats-api
  #   restart: always

  # NGINX FOR WEB
  nginx:
    build: ./nginx
    container_name: nginx
    hostname: nginx
    ports:
      - 80:80
    networks:
      - webnet
  # WEB
  web:
    container_name: web
    build: ./services/web
    ports:
      - '3000:3000'
    networks:
      - webnet
    restart: always

  # MONGO
  mongo:
    container_name: mongo
    hostname: mongo
    command: --quiet
    image: mongo:latest
    ports:
      - 27017:27017
    networks:
      - webnet
    restart: always

  # PROXY
  proxy-server:
    # env_file:
    #   - ./services/proxy-server/.env.production
    container_name: proxy-server
    hostname: proxy-server
    build: ./services/proxy-server
    ports:
      - '8080:8080'
    networks:
      - webnet
    depends_on:
      - chats-api
    restart: always

  # CHATS API
  chats-api:
    container_name: chats-api # replaces localhost with this name
    hostname: chats-api
    build: ./services/chats-api
    ports:
      - '5000:5000'
    networks:
      - webnet
    depends_on:
      - mongo
    restart: always

#   # REVERSE PROXY
#   traefik:
#     image: traefik:v2.5
#     container_name: traefik
#     # Enables the web UI and tells Traefik to listen to docker
#     command: --api.insecure=true --providers.docker
#     ports:
#       - '80:80'
#       - '443:443'
#       # The Web UI (enabled by --api.insecure=true)
#       - '8080:8080'
#     volumes:
#       # Forward root for traefik.yml
#       - /etc/traefik:/etc/traefik
#       # Pass traefik-ssl-certs to ssl-certs folder in container
#       - traefik-ssl-certs:/ssl-certs
#       # So that Traefik can listen to the Docker events
#       - /var/run/docker.sock:/var/run/docker.sock:ro
# volumes:
#   traefik-ssl-certs:
#     driver: local

networks:
  webnet:
